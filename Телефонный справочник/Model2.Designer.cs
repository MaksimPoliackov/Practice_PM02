//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("СправочникModel1", "FK_Контакт_Группа_контактов", "Группа_контактов", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Телефонный_справочник.Группа_контактов), "Контакт", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Телефонный_справочник.Контакт), true)]
[assembly: EdmRelationshipAttribute("СправочникModel1", "FK_Контакт_Компания", "Компания", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Телефонный_справочник.Компания), "Контакт", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Телефонный_справочник.Контакт), true)]

#endregion

namespace Телефонный_справочник
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class СправочникEntities2 : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект СправочникEntities2, используя строку соединения из раздела "СправочникEntities2" файла конфигурации приложения.
        /// </summary>
        public СправочникEntities2() : base("name=СправочникEntities2", "СправочникEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта СправочникEntities2.
        /// </summary>
        public СправочникEntities2(string connectionString) : base(connectionString, "СправочникEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта СправочникEntities2.
        /// </summary>
        public СправочникEntities2(EntityConnection connection) : base(connection, "СправочникEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Группа_контактов> Группа_контактов
        {
            get
            {
                if ((_Группа_контактов == null))
                {
                    _Группа_контактов = base.CreateObjectSet<Группа_контактов>("Группа_контактов");
                }
                return _Группа_контактов;
            }
        }
        private ObjectSet<Группа_контактов> _Группа_контактов;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Компания> Компания
        {
            get
            {
                if ((_Компания == null))
                {
                    _Компания = base.CreateObjectSet<Компания>("Компания");
                }
                return _Компания;
            }
        }
        private ObjectSet<Компания> _Компания;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Контакт> Контакт
        {
            get
            {
                if ((_Контакт == null))
                {
                    _Контакт = base.CreateObjectSet<Контакт>("Контакт");
                }
                return _Контакт;
            }
        }
        private ObjectSet<Контакт> _Контакт;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Группа_контактов. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToГруппа_контактов(Группа_контактов группа_контактов)
        {
            base.AddObject("Группа_контактов", группа_контактов);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Компания. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToКомпания(Компания компания)
        {
            base.AddObject("Компания", компания);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Контакт. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToКонтакт(Контакт контакт)
        {
            base.AddObject("Контакт", контакт);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="СправочникModel1", Name="Группа_контактов")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Группа_контактов : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Группа_контактов.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static Группа_контактов CreateГруппа_контактов(global::System.Int32 id)
        {
            Группа_контактов группа_контактов = new Группа_контактов();
            группа_контактов.ID = id;
            return группа_контактов;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Название_группы
        {
            get
            {
                return _Название_группы;
            }
            set
            {
                OnНазвание_группыChanging(value);
                ReportPropertyChanging("Название_группы");
                _Название_группы = StructuralObject.SetValidValue(value, true, "Название_группы");
                ReportPropertyChanged("Название_группы");
                OnНазвание_группыChanged();
            }
        }
        private global::System.String _Название_группы;
        partial void OnНазвание_группыChanging(global::System.String value);
        partial void OnНазвание_группыChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("СправочникModel1", "FK_Контакт_Группа_контактов", "Контакт")]
        public EntityCollection<Контакт> Контакт
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Контакт>("СправочникModel1.FK_Контакт_Группа_контактов", "Контакт");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Контакт>("СправочникModel1.FK_Контакт_Группа_контактов", "Контакт", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="СправочникModel1", Name="Компания")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Компания : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Компания.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="название">Исходное значение свойства Название.</param>
        public static Компания CreateКомпания(global::System.Int32 id, global::System.String название)
        {
            Компания компания = new Компания();
            компания.Id = id;
            компания.Название = название;
            return компания;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Название
        {
            get
            {
                return _Название;
            }
            set
            {
                OnНазваниеChanging(value);
                ReportPropertyChanging("Название");
                _Название = StructuralObject.SetValidValue(value, false, "Название");
                ReportPropertyChanged("Название");
                OnНазваниеChanged();
            }
        }
        private global::System.String _Название;
        partial void OnНазваниеChanging(global::System.String value);
        partial void OnНазваниеChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("СправочникModel1", "FK_Контакт_Компания", "Контакт")]
        public EntityCollection<Контакт> Контакт
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Контакт>("СправочникModel1.FK_Контакт_Компания", "Контакт");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Контакт>("СправочникModel1.FK_Контакт_Компания", "Контакт", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="СправочникModel1", Name="Контакт")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Контакт : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Контакт.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="фамилия">Исходное значение свойства Фамилия.</param>
        /// <param name="имя">Исходное значение свойства Имя.</param>
        /// <param name="отчество">Исходное значение свойства Отчество.</param>
        /// <param name="номер_Телефона">Исходное значение свойства Номер_Телефона.</param>
        public static Контакт CreateКонтакт(global::System.Int32 id, global::System.String фамилия, global::System.String имя, global::System.String отчество, global::System.String номер_Телефона)
        {
            Контакт контакт = new Контакт();
            контакт.ID = id;
            контакт.Фамилия = фамилия;
            контакт.Имя = имя;
            контакт.Отчество = отчество;
            контакт.Номер_Телефона = номер_Телефона;
            return контакт;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Фамилия
        {
            get
            {
                return _Фамилия;
            }
            set
            {
                OnФамилияChanging(value);
                ReportPropertyChanging("Фамилия");
                _Фамилия = StructuralObject.SetValidValue(value, false, "Фамилия");
                ReportPropertyChanged("Фамилия");
                OnФамилияChanged();
            }
        }
        private global::System.String _Фамилия;
        partial void OnФамилияChanging(global::System.String value);
        partial void OnФамилияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Имя
        {
            get
            {
                return _Имя;
            }
            set
            {
                OnИмяChanging(value);
                ReportPropertyChanging("Имя");
                _Имя = StructuralObject.SetValidValue(value, false, "Имя");
                ReportPropertyChanged("Имя");
                OnИмяChanged();
            }
        }
        private global::System.String _Имя;
        partial void OnИмяChanging(global::System.String value);
        partial void OnИмяChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Отчество
        {
            get
            {
                return _Отчество;
            }
            set
            {
                OnОтчествоChanging(value);
                ReportPropertyChanging("Отчество");
                _Отчество = StructuralObject.SetValidValue(value, false, "Отчество");
                ReportPropertyChanged("Отчество");
                OnОтчествоChanged();
            }
        }
        private global::System.String _Отчество;
        partial void OnОтчествоChanging(global::System.String value);
        partial void OnОтчествоChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Номер_Телефона
        {
            get
            {
                return _Номер_Телефона;
            }
            set
            {
                OnНомер_ТелефонаChanging(value);
                ReportPropertyChanging("Номер_Телефона");
                _Номер_Телефона = StructuralObject.SetValidValue(value, false, "Номер_Телефона");
                ReportPropertyChanged("Номер_Телефона");
                OnНомер_ТелефонаChanged();
            }
        }
        private global::System.String _Номер_Телефона;
        partial void OnНомер_ТелефонаChanging(global::System.String value);
        partial void OnНомер_ТелефонаChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String E_mail
        {
            get
            {
                return _E_mail;
            }
            set
            {
                OnE_mailChanging(value);
                ReportPropertyChanging("E_mail");
                _E_mail = StructuralObject.SetValidValue(value, true, "E_mail");
                ReportPropertyChanged("E_mail");
                OnE_mailChanged();
            }
        }
        private global::System.String _E_mail;
        partial void OnE_mailChanging(global::System.String value);
        partial void OnE_mailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Компания
        {
            get
            {
                return _Компания;
            }
            set
            {
                OnКомпанияChanging(value);
                ReportPropertyChanging("Компания");
                _Компания = StructuralObject.SetValidValue(value, "Компания");
                ReportPropertyChanged("Компания");
                OnКомпанияChanged();
            }
        }
        private Nullable<global::System.Int32> _Компания;
        partial void OnКомпанияChanging(Nullable<global::System.Int32> value);
        partial void OnКомпанияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Должность
        {
            get
            {
                return _Должность;
            }
            set
            {
                OnДолжностьChanging(value);
                ReportPropertyChanging("Должность");
                _Должность = StructuralObject.SetValidValue(value, true, "Должность");
                ReportPropertyChanged("Должность");
                OnДолжностьChanged();
            }
        }
        private global::System.String _Должность;
        partial void OnДолжностьChanging(global::System.String value);
        partial void OnДолжностьChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ID_Группа_контактов
        {
            get
            {
                return _ID_Группа_контактов;
            }
            set
            {
                OnID_Группа_контактовChanging(value);
                ReportPropertyChanging("ID_Группа_контактов");
                _ID_Группа_контактов = StructuralObject.SetValidValue(value, "ID_Группа_контактов");
                ReportPropertyChanged("ID_Группа_контактов");
                OnID_Группа_контактовChanged();
            }
        }
        private Nullable<global::System.Int32> _ID_Группа_контактов;
        partial void OnID_Группа_контактовChanging(Nullable<global::System.Int32> value);
        partial void OnID_Группа_контактовChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Дата_Рождения
        {
            get
            {
                return _Дата_Рождения;
            }
            set
            {
                OnДата_РожденияChanging(value);
                ReportPropertyChanging("Дата_Рождения");
                _Дата_Рождения = StructuralObject.SetValidValue(value, "Дата_Рождения");
                ReportPropertyChanged("Дата_Рождения");
                OnДата_РожденияChanged();
            }
        }
        private Nullable<global::System.DateTime> _Дата_Рождения;
        partial void OnДата_РожденияChanging(Nullable<global::System.DateTime> value);
        partial void OnДата_РожденияChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Фото
        {
            get
            {
                return StructuralObject.GetValidValue(_Фото);
            }
            set
            {
                OnФотоChanging(value);
                ReportPropertyChanging("Фото");
                _Фото = StructuralObject.SetValidValue(value, true, "Фото");
                ReportPropertyChanged("Фото");
                OnФотоChanged();
            }
        }
        private global::System.Byte[] _Фото;
        partial void OnФотоChanging(global::System.Byte[] value);
        partial void OnФотоChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("СправочникModel1", "FK_Контакт_Группа_контактов", "Группа_контактов")]
        public Группа_контактов Группа_контактов
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Группа_контактов>("СправочникModel1.FK_Контакт_Группа_контактов", "Группа_контактов").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Группа_контактов>("СправочникModel1.FK_Контакт_Группа_контактов", "Группа_контактов").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Группа_контактов> Группа_контактовReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Группа_контактов>("СправочникModel1.FK_Контакт_Группа_контактов", "Группа_контактов");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Группа_контактов>("СправочникModel1.FK_Контакт_Группа_контактов", "Группа_контактов", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("СправочникModel1", "FK_Контакт_Компания", "Компания")]
        public Компания Компания1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Компания>("СправочникModel1.FK_Контакт_Компания", "Компания").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Компания>("СправочникModel1.FK_Контакт_Компания", "Компания").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Компания> Компания1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Компания>("СправочникModel1.FK_Контакт_Компания", "Компания");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Компания>("СправочникModel1.FK_Контакт_Компания", "Компания", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
